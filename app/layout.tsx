"use client";

import type { Metadata } from "next";
// import { Inter } from "next/font/google";
import "./globals.css";
// import { FC, ReactNode, memo } from "react";
// import { RecoilRoot } from "recoil";

/* type Props = {
  chilrdren: ReactNode
} */

// const inter = Inter({ subsets: ["latin"] });

/* export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
}; */

/* export const RecoilProvider: FC<Props> = memo((props) => {
  const { children } = props;

  return <RecoilRoot>{children}</RecoilRoot>
}) */

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="ja">
      <head></head>
      <body>{children}
        <script
          dangerouslySetInnerHTML={{
            __html: themeInitializerScript,
          }}
        >

        </script>
      </body>
    </html>
  );
}

const themeInitializerScript = `(function() {
  ${setInitialColorMode.toString()}
  setInitialColorMode();
})()`;

function setInitialColorMode() {
  function getInitialColorMode() {
    // local storageからtheme取得
    const storedPreferenceMode = window.localStorage.getItem("theme");
    const hasStoredPreference= typeof storedPreferenceMode === "string";

    if (hasStoredPreference) {
      return storedPreferenceMode;
    }

    const preference = window.matchMedia("(prefers-color-scheme): dark");
    const hasMediaQueryPreference = typeof preference.matches === "boolean";

    if (hasMediaQueryPreference) {
      return preference.matches ? "dark" : "light";
    }

    return "light";
  }

  const currentColorMode = getInitialColorMode();

  if (currentColorMode === "dark") {
    document.documentElement.setAttribute("data-theme", "dark");
  }
}
